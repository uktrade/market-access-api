# Generated by Django 3.2.16 on 2022-12-02 11:05

from django.db import migrations


def compare_priority_dicts(dict1, dict2):
    for key in dict1:
        if dict1[key] != dict2[key]:
            return False
    return True


def get_barrier_priority_fields(barrier):
    return {
        "top_priority_status": barrier.top_priority_status,
        "priority_summary": barrier.priority_summary,
        "top_priority_rejection_summary": barrier.top_priority_rejection_summary,
    }


def populate_summaries_table_from_history(apps, schema_editor):
    field_to_track = [
        "top_priority_status",
        "priority_summary",
        "top_priority_rejection_summary",
    ]
    HistoricalBarrier = apps.get_model("barriers", "HistoricalBarrier")
    Barrier = apps.get_model("barriers", "Barrier")
    BarrierPriorityHistoricalSummary = apps.get_model(
        "barriers", "BarrierPriorityHistoricalSummary"
    )
    for barrier in Barrier.objects.all():
        history_items = barrier.history.all()
        current_priority_state = get_barrier_priority_fields(barrier)
        for history_item in history_items:
            new_priority_state = get_barrier_priority_fields(history_item)
            if compare_priority_dicts(current_priority_state, new_priority_state):
                continue
            latest_priority_summary = (
                BarrierPriorityHistoricalSummary.objects.filter(barrier=barrier)
                .order_by("-history_date")
                .first()
            )
            current_top_priority_status = current_priority_state["top_priority_status"]
            new_priority_status = new_priority_state["top_priority_status"]
            is_changed = new_priority_status != current_top_priority_status
            user = history_item.history_user
            if is_changed:
                new_summary = BarrierPriorityHistoricalSummary(
                    barrier=barrier,
                    created_by=user,
                    top_priority_status=new_priority_status,
                    top_priority_rejection_summary=new_priority_state.get("top_priority_rejection_summary"),
                    priority_status=new_priority_state["priority_status"]
                )
                new_summary.save()
            else:
                existing_summary = BarrierPriorityHistoricalSummary.objects.filter(barrier=barrier)
                    .order_by("-created_by")
                    .first()
                existing_summary.top_priority_status = new_priority_status
                existing_summary.top_priority_rejection_summary = new_priority_state.get("top_priority_rejection_summary")
                existing_summary.top_priority_summary = new_priority_state["priority_summary"]



class Migration(migrations.Migration):

    dependencies = [
        ("barriers", "0135_auto_20221202_1132"),
    ]

    operations = [
        migrations.RunPython(populate_summaries_table_from_history),
    ]
