# Generated by Django 3.2.13 on 2022-05-11 09:41

from django.db import migrations, models

from api.metadata.constants import TOP_PRIORITY_BARRIER_STATUS

top_priority_tag_title = "TOP 100 PRIORITY BARRIER"


def change_top_priority_tag_to_field(apps, schema_editor):
    Barrier = apps.get_model("barriers", "Barrier")
    top_priority_barriers = Barrier.objects.filter(tags__is_top_priority_tag=True)
    top_priority_barriers.update(
        top_priority_status=TOP_PRIORITY_BARRIER_STATUS.APPROVED
    )
    other_barriers = Barrier.objects.filter(tags__is_top_priority_tag=False).exclude(
        top_priority_status__in=(
            TOP_PRIORITY_BARRIER_STATUS.APPROVED,
            TOP_PRIORITY_BARRIER_STATUS.REMOVAL_PENDING,
        )
    )
    other_barriers.update(top_priority_status=TOP_PRIORITY_BARRIER_STATUS.NONE)

    BarrierTag = apps.get_model("metadata", "BarrierTag")
    try:
        top_priority_barrier_tag = BarrierTag.objects.get(title=top_priority_tag_title)
        top_priority_barrier_tag.barrier_set.clear()
        top_priority_barrier_tag.delete()
    except BarrierTag.DoesNotExist:
        pass


def change_top_priority_field_to_tag(apps, schema_editor):
    Barrier = apps.get_model("barriers", "Barrier")
    BarrierTag = apps.get_model("metadata", "BarrierTag")
    top_priority_barrier_tag = BarrierTag.objects.create(  # values taken from prod as of 2022-05-11
        title=top_priority_tag_title,
        # order=4,
        description="'Indicator that the barrier is marked as a top priority for resolution.",
        show_at_reporting=True,
        is_top_priority_tag=True,
    )
    top_priority_barriers = Barrier.objects.filter(
        top_priority_status__in=(
            TOP_PRIORITY_BARRIER_STATUS.APPROVED,
            TOP_PRIORITY_BARRIER_STATUS.REMOVAL_PENDING,
        )
    )
    for barrier in top_priority_barriers:
        barrier.tags.add(top_priority_barrier_tag)


class Migration(migrations.Migration):

    dependencies = [
        ("barriers", "0124_historicalbarrierprogressupdate"),
        ("metadata", "0024_barriertag_is_top_priority_tag"),
    ]

    operations = [
        migrations.AddField(
            model_name="barrier",
            name="top_priority_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("NONE", ""),
                    ("APPROVAL_PENDING", "Top 100 Priority Barrier - Approval Pending"),
                    ("REMOVAL_PENDING", "Top 100 Priority Barrier - Removal Pending"),
                    ("APPROVED", "Top 100 Priority Barrier"),
                ],
                default="NONE",
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="historicalbarrier",
            name="top_priority_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("NONE", ""),
                    ("APPROVAL_PENDING", "Top 100 Priority Barrier - Approval Pending"),
                    ("REMOVAL_PENDING", "Top 100 Priority Barrier - Removal Pending"),
                    ("APPROVED", "Top 100 Priority Barrier"),
                ],
                default="NONE",
                max_length=50,
            ),
        ),
        migrations.RunPython(
            change_top_priority_tag_to_field,
            change_top_priority_field_to_tag,
        ),
    ]
