# Generated by Django 3.2.16 on 2022-12-02 14:33

from django.db import migrations


def populate_summaries_table_from_history(apps, schema_editor):
    Barrier = apps.get_model("barriers", "Barrier")
    HistoricalBarrier = apps.get_model("barriers", "HistoricalBarrier")

    BarrierTopPrioritySummary = apps.get_model("barriers", "BarrierTopPrioritySummary")

    # Get and loop through every barrier
    for barrier in Barrier.objects.all():
        # Get the historical changes of the barrier which contain priority summary
        history_items = (
            HistoricalBarrier.objects.filter(id=barrier.id)
            .order_by("-history_date")
            .all()
            .exclude(priority_summary__exact="")
        )

        print(history_items.count())
        # Perform next section if the barrier has had a priority_summary at some point
        if history_items.count() > 0:

            print("-----")
            print("Barrier Has Summary")

            # Loop through history items
            # We are looking for the instance where priority_summary was last changed
            iterator = 0
            for item in history_items:
                # Make sure we are not looking at the last barrier in the list - as
                # there is no older update to compare it to
                if iterator+1 < history_items.count():
                    # Get the next oldest history item
                    next_item = history_items[iterator+1]

                    # If the summaries are the same, move onto the next loop iteration
                    if next_item.priority_summary == item.priority_summary:
                        iterator=iterator+1
                        continue
                    else:
                        # In this case, we have found the earliest history item
                        # with the current priority_status, so break out of the loop
                        break

            # Get the earliest appearence of the priority_summary and the latest
            first_update = history_items.last()
            last_update = history_items[iterator]

            # Get the user objects of the users who caused the updates
            first_user = first_update.history_user
            last_user = last_update.history_user

            # If the first update text matches the last update text, we can use
            # the creation_date as modified_date
            if first_update.priority_summary == last_update.priority_summary:
                print("Creating entry - one summary record for barrier: " + str(barrier.id))
                new_summary = BarrierTopPrioritySummary(
                    barrier=barrier,
                    created_by=first_user,
                    created_on=first_update.history_date,
                    modified_by=first_user,
                    modified_on=first_update.history_date,
                    top_priority_summary_text=last_update.priority_summary
                )
                new_summary.save()
            else:
                print("Creating entry - multiple summary records for barrier: " + str(barrier.id))
                new_summary = BarrierTopPrioritySummary(
                    barrier=barrier,
                    created_by=first_user,
                    created_on=first_update.history_date,
                    modified_by=last_user,
                    modified_on=last_update.history_date,
                    top_priority_summary_text=last_update.priority_summary
                )
                new_summary.save()

            print("-----")


def revert_populate_summaries_table_from_history(apps, schema_editor):
    BarrierTopPrioritySummary = apps.get_model("barriers", "BarrierTopPrioritySummary")
    BarrierTopPrioritySummary.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("barriers", "0135_barriertopprioritysummary"),
    ]

    operations = [
        migrations.RunPython(
            populate_summaries_table_from_history,
            revert_populate_summaries_table_from_history,
        ),
    ]
