# Generated by Django 3.1.2 on 2020-10-28 14:57

import api.barriers.mixins
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('barriers', '0091_auto_20201015_1407'),
        ('assessment', '0008_auto_20200901_1511'),
    ]

    operations = [
        migrations.CreateModel(
            name='StrategicAssessment',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('archived_on', models.DateTimeField(blank=True, null=True)),
                ('archived_reason', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(null=True)),
                ('reviewed_on', models.DateTimeField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('hmg_strategy', models.TextField()),
                ('government_policy', models.TextField()),
                ('trading_relations', models.TextField()),
                ('uk_interest_and_security', models.TextField()),
                ('uk_grants', models.TextField()),
                ('competition', models.TextField()),
                ('additional_information', models.TextField(blank=True)),
                ('scale', models.PositiveIntegerField(choices=[(1, '1: 3 or more government wide objectives, or poses medium/high risk to delivery of one of government wide objectives and/or potential for significant PR issues.'), (2, '2: 1 or 2 government wide objectives but does not pose much risk for PR or objective delivery'), (3, '3: neutral to government wide objectives'), (4, '4: supports 1 or 2  government wide objectives'), (5, '5: substantial contribution to 1 strategic objective or supporting 3 or more strategic objectives')], null=True)),
                ('archived_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('barrier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strategic_assessments', to='barriers.barrierinstance')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_on',),
                'permissions': (('archive_strategicassessment', 'Can archive strategic assessment'), ('approve_strategicassessment', 'Can approve strategic assessment')),
            },
            bases=(api.barriers.mixins.BarrierRelatedMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ResolvabilityAssessment',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('archived_on', models.DateTimeField(blank=True, null=True)),
                ('archived_reason', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(null=True)),
                ('reviewed_on', models.DateTimeField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('time_to_resolve', models.PositiveIntegerField(choices=[(0, '0: not resolvable'), (1, '1: longer than 5 years'), (2, '2: 3 to 5 years'), (3, '3: 1 to 3 years'), (4, '4: within a year')], null=True)),
                ('effort_to_resolve', models.PositiveIntegerField(choices=[(0, '0: Not resolvable'), (1, '1: Highly resource intensive (significant resources needed)'), (2, '2: substantial resources required (extras or significant reprioritisation of exsiting resources needed)'), (3, '3: moderate resources required (low or moderate prioritisation or resources needed'), (4, '4: low resource requirement (can be delivered within existing resources')], null=True)),
                ('explanation', models.TextField(blank=True)),
                ('archived_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('barrier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resolvability_assessments', to='barriers.barrierinstance')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_on',),
                'permissions': (('archive_resolvabilityassessment', 'Can archive resolvability assessment'), ('approve_resolvabilityassessment', 'Can approve resolvability assessment')),
            },
            bases=(api.barriers.mixins.BarrierRelatedMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalStrategicAssessment',
            fields=[
                ('created_on', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('modified_on', models.DateTimeField(blank=True, editable=False, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('archived_on', models.DateTimeField(blank=True, null=True)),
                ('archived_reason', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(null=True)),
                ('reviewed_on', models.DateTimeField(null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4)),
                ('hmg_strategy', models.TextField()),
                ('government_policy', models.TextField()),
                ('trading_relations', models.TextField()),
                ('uk_interest_and_security', models.TextField()),
                ('uk_grants', models.TextField()),
                ('competition', models.TextField()),
                ('additional_information', models.TextField(blank=True)),
                ('scale', models.PositiveIntegerField(choices=[(1, '1: 3 or more government wide objectives, or poses medium/high risk to delivery of one of government wide objectives and/or potential for significant PR issues.'), (2, '2: 1 or 2 government wide objectives but does not pose much risk for PR or objective delivery'), (3, '3: neutral to government wide objectives'), (4, '4: supports 1 or 2  government wide objectives'), (5, '5: substantial contribution to 1 strategic objective or supporting 3 or more strategic objectives')], null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('archived_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('barrier', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='barriers.barrierinstance')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical strategic assessment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalResolvabilityAssessment',
            fields=[
                ('created_on', models.DateTimeField(blank=True, db_index=True, editable=False, null=True)),
                ('modified_on', models.DateTimeField(blank=True, editable=False, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('archived_on', models.DateTimeField(blank=True, null=True)),
                ('archived_reason', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(null=True)),
                ('reviewed_on', models.DateTimeField(null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4)),
                ('time_to_resolve', models.PositiveIntegerField(choices=[(0, '0: not resolvable'), (1, '1: longer than 5 years'), (2, '2: 3 to 5 years'), (3, '3: 1 to 3 years'), (4, '4: within a year')], null=True)),
                ('effort_to_resolve', models.PositiveIntegerField(choices=[(0, '0: Not resolvable'), (1, '1: Highly resource intensive (significant resources needed)'), (2, '2: substantial resources required (extras or significant reprioritisation of exsiting resources needed)'), (3, '3: moderate resources required (low or moderate prioritisation or resources needed'), (4, '4: low resource requirement (can be delivered within existing resources')], null=True)),
                ('explanation', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('archived_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('barrier', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='barriers.barrierinstance')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical resolvability assessment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
