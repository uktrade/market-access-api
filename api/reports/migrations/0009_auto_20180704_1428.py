# Generated by Django 2.0.5 on 2018-07-04 14:28

from django.db import migrations

report_stage_items_to_add = [
    {
        "code": "1.0",
        "description": "Report a problem",
        "sub_items": [
            {"code": "1.1", "description": "Status of the problem"},
            {"code": "1.2", "description": "Export company affected"},
            {"code": "1.3", "description": "About the reporter"},
            {"code": "1.4", "description": "About the problem"},
            {"code": "1.5", "description": "Impact of the problem"},
            {"code": "1.6", "description": "Legal obligations infinged"},
            {"code": "1.7", "description": "Define type of market access barrier"},
        ],
    },
    {
        "code": "2.0",
        "description": "Create a barrier record",
        "sub_items": [
            {
                "code": "2.1",
                "description": "Describe next steps and what type of support you might need",
            },
            {
                "code": "2.2",
                "description": "Next steps the company affected have requested",
            },
        ],
    },
]

report_stage_items_to_remove = [
    {"code": "3.0", "description": "Tell us what happens next", "sub_items": []}
]


def update_report_stages(apps, schema_editor):
    Stage = apps.get_model("reports", "Stage")

    for item in report_stage_items_to_add:
        try:
            stage = Stage.objects.get(code=item["code"])
        except Stage.DoesNotExist:
            stage = Stage(code=item["code"], description=item["description"]).save()
        for sub_item in item["sub_items"]:
            try:
                sub_stage = Stage.objects.get(code=sub_item["code"])
                sub_stage.description = item["description"]
                sub_stage.parent = stage
                sub_stage.save()
            except Stage.DoesNotExist:
                Stage(
                    code=sub_item["code"],
                    description=sub_item["description"],
                    parent=stage,
                ).save()


def remove_report_stages(apps, schema_editor):
    Stage = apps.get_model("reports", "Stage")
    try:
        Stage.objects.get(code="3.0").delete()
    except Stage.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [("reports", "0008_auto_20180704_1321")]

    operations = [
        migrations.RunPython(update_report_stages),
        migrations.RunPython(remove_report_stages),
    ]
