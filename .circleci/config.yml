# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  tests:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: postgres:9.6.16
        environment:
          POSTGRES_DB=market_access
      - image: ukti/mock-sso
        environment:
          MOCK_SSO_PORT: '5000'
          MOCK_SSO_USERNAME: test-user
          MOCK_SSO_SCOPE: test

    environment:
      DATABASE_URL: 'postgresql://postgres@localhost/market_access'
      DATAHUB_SECRET: 'secret'
      DH_HAWK_ID: 'dh_hawk_id'
      DH_HAWK_KEY: 'dh_hawk_key'
      DJANGO_HASHID_FIELD_SALT: 'dash-of-salt'
      DJANGO_SETTINGS_MODULE: 'config.settings.test'
      DEBUG: 'False'
      ELASTIC_APM_ENABLED: 'False'
      SECRET_KEY: 'changeme'
      SSO_ENABLED: 'True'
      SENTRY_DSN: ''
      SENTRY_ENVIRONMENT: ''
      RESOURCE_SERVER_INTROSPECTION_URL: 'http://localhost:5000/o/introspect/'
      RESOURCE_SERVER_AUTH_TOKEN: sso-token
      RESOURCE_SERVER_USER_INFO_URL: 'http://localhost:8080/api/v1/user/me/'
      RESOURCE_SERVER_USER_INTROSPECT_URL: 'http://localhost:8080/api/v1/user/introspect/'
      FAKE_METADATA: 'True'
      DH_METADATA_URL: 'https://datahub-api-dev.london.cloudapps.digital/metadata/'
      HAWK_ENABLED: 'False'
      HAWK_KEY: 'hawkkey'
      HAWK_ID: 'metadata'
      AUTHBROKER_URL: 'http://localhost:5000/o/'
      AUTHBROKER_CLIENT_ID: 'auth client'
      AUTHBROKER_CLIENT_SECRET: auth secret
      ALLOWED_ADMIN_IPS: '1.2.3.4'
      RESTRICT_ADMIN: 'False'
      AV_V2_SERVICE_URL: 'https://test:secret@av-api/scan'
      DEFAULT_BUCKET: 'market-access-enc-dev'
      AWS_ACCESS_KEY_ID: 'access_key'
      AWS_SECRET_ACCESS_KEY: 'access_secret'
      AWS_DEFAULT_REGION: 'eu-west-2'
      REDIS_BASE_URL: 'redis://localhost'
      DMAS_BASE_URL: 'https://dummy.market-access.net'
      NOTIFY_API_KEY: ''
      NOTIFY_SAVED_SEARCHES_TEMPLATE_ID: ''
      PUBLIC_DATA_AWS_ACCESS_KEY_ID: 'dummy'
      PUBLIC_DATA_AWS_SECRET_ACCESS_KEY: 'dummy'
      PUBLIC_DATA_BUCKET: 'dummy'
      PUBLIC_DATA_BUCKET_REGION: 'us-east-1'
      PUBLIC_DATA_KEY_PREFIX: 'dummy/'
      PIP_USE_FEATURE: 2020-resolver

    working_directory: ~/market-access-api

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}

      - run:
          command: sudo pip install poetry==1.0.10

      - run:
          name: Install dependencies
          command: |
            poetry install

      - save_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

      - run:
          name: run tests
          command: |
            poetry run pytest tests

      - store_artifacts:
          path: test-reports
          destination: test-reports

  pep8:
    docker:
      - image: circleci/python:3.7

    working_directory: ~/market-access-api
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}

      - run:
          command: sudo pip install poetry

      - run:
          name: Install dependencies
          command: |
            poetry install

      - save_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

      - run: poetry run flake8 --count

workflows:
  version: 2
  test:
    jobs:
      - tests
      - pep8
