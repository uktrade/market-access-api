# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  codecov: codecov/codecov@3

jobs:
  tests:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.9

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: postgres:16
        environment:
          POSTGRES_DB: market_access
          POSTGRES_USER: postgres # pragma: allowlist secret
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
      - image: ukti/mock-sso
        environment:
          MOCK_SSO_PORT: "5000"
          MOCK_SSO_USERNAME: test-user
          MOCK_SSO_SCOPE: test

    environment:
      DATABASE_URL: "postgresql://postgres@localhost/market_access"
      DATAHUB_SECRET: "secret" # pragma: allowlist secret
      DH_HAWK_ID: "dh_hawk_id" # pragma: allowlist secret
      DH_HAWK_KEY: "dh_hawk_key" # pragma: allowlist secret
      DJANGO_HASHID_FIELD_SALT: "dash-of-salt"
      DJANGO_SETTINGS_MODULE: "config.settings.test"
      DEBUG: "False"
      ELASTIC_APM_ENABLED: "False"
      SECRET_KEY: "changeme" # pragma: allowlist secret
      SSO_ENABLED: "True"
      SENTRY_DSN: ""
      SENTRY_ENVIRONMENT: ""
      RESOURCE_SERVER_INTROSPECTION_URL: "http://localhost:5000/o/introspect/"
      RESOURCE_SERVER_AUTH_TOKEN: sso-token
      RESOURCE_SERVER_USER_INFO_URL: "http://localhost:8080/api/v1/user/me/"
      RESOURCE_SERVER_USER_INTROSPECT_URL: "http://localhost:8080/api/v1/user/introspect/"
      FAKE_METADATA: "True"
      DH_METADATA_URL: "https://datahub-api-dev.london.cloudapps.digital/metadata/"
      HAWK_KEY: "hawkkey"
      HAWK_ID: "metadata"
      AUTHBROKER_URL: "http://localhost:5000/o/"
      AUTHBROKER_CLIENT_ID: "auth client"
      AUTHBROKER_CLIENT_SECRET: auth secret # pragma: allowlist secret
      ALLOWED_ADMIN_IPS: "1.2.3.4"
      RESTRICT_ADMIN: "False"
      AV_V2_SERVICE_URL: "https://test:secret@av-api/scan" # pragma: allowlist secret
      DEFAULT_BUCKET: "market-access-enc-dev"
      AWS_ACCESS_KEY_ID: "access_key"
      AWS_SECRET_ACCESS_KEY: "access_secret" # pragma: allowlist secret
      AWS_DEFAULT_REGION: "eu-west-2"
      REDIS_BASE_URL: "redis://localhost"
      DMAS_BASE_URL: "https://dummy.market-access.net"
      NOTIFY_API_KEY: "xxx-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx" # pragma: allowlist secret
      NOTIFY_SAVED_SEARCHES_TEMPLATE_ID: ""
      NOTIFY_BARRIER_NOTIFCATION_ID: ""
      NOTIFY_GENERATED_FILE_ID: ""
      NOTIFY_ACTION_PLAN_NOTIFCATION_ID: ""
      NOTIFY_ACTION_PLAN_USER_SET_AS_OWNER_ID: ""
      PUBLIC_DATA_AWS_ACCESS_KEY_ID: "dummy"
      PUBLIC_DATA_AWS_SECRET_ACCESS_KEY: "dummy" # pragma: allowlist secret
      PUBLIC_DATA_BUCKET: "dummy"
      PUBLIC_DATA_BUCKET_REGION: "us-east-1"
      PUBLIC_DATA_KEY_PREFIX: "dummy/"
      SEARCH_DOWNLOAD_APPROVAL_NOTIFICATION_ID: "change-me"
      SEARCH_DOWNLOAD_APPROVAL_REQUEST_EMAILS: john.doe@example.org
      APPROVED_DIGITAL_TRADE_EMAIL_DOMAINS: ""
      BARRIER_INACTIVITY_REMINDER_NOTIFICATION_ID: "test-123" # pragma: allowlist secret
      AUTOMATIC_ARCHIVE_AND_DORMANCY_UPDATE_EMAIL_TEMPLATE_ID: "test-1234" # pragma: allowlist secret

    working_directory: ~/market-access-api
    parallelism: 10
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}

      - run:
          command: sudo pip install poetry==1.6.1

      - run:
          name: Install dependencies
          command: |
            poetry install --no-ansi

      - save_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

      - run:
          name: Install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Writing to the already existing market_access database as setting up two postgres instances on circleci, at
      # least with the docker executor, isn't easily possible due to clashing ports. You can't change the port that the
      # postgres docker image binds to without creating your own image and this is a much simpler solution.

      - run:
          name: Check for pending migrations
          command: poetry run python manage.py makemigrations --check --dry-run

      - run:
          name: Apply migrations
          command: poetry run python manage.py migrate

      - run:
          name: run tests & save coverage
          parallel: true
          command: |
            poetry run coverage run -m pytest tests --circleci-parallelize
            poetry run coverage json

      - codecov/upload

      - store_artifacts:
          path: test-reports
          destination: test-reports

  format_and_secrets_checks:
    docker:
      - image: circleci/python:3.9
    working_directory: ~/market-access-api
    steps:
      - checkout
      - run:
          command: sudo pip install pre-commit
      - restore_cache:
          keys:
            - pre-commit-cache-{{ arch }}-{{ .Branch }}
      - run:
          name: Formatting checks
          command: pre-commit run --from-ref origin/HEAD --to-ref HEAD
      - save_cache:
          key: pre-commit-cache-{{ arch }}-{{ .Branch }}
          paths:
            - ~/.cache/pre-commit

  pep8:
    docker:
      - image: circleci/python:3.9

    working_directory: ~/market-access-api
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}

      - run:
          command: sudo pip install poetry==1.6.1

      - run:
          name: Install dependencies
          command: |
            poetry install --no-ansi

      - save_cache:
          key: v1-dependencies-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs

      - run: poetry run flake8 --count

workflows:
  version: 2
  test:
    jobs:
      - tests
      - format_and_secrets_checks
      - pep8
